//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	OidcScopes = "oidc.Scopes"
)

// IndexData defines model for IndexData.
type IndexData struct {
	ContactsCount       *int64 `json:"contactsCount,omitempty"`
	JournalEntriesCount *int64 `json:"journalEntriesCount,omitempty"`
}

// JournalEntry defines model for JournalEntry.
type JournalEntry struct {
	Body      *string    `json:"body,omitempty"`
	Date      *time.Time `json:"date,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	Namespace *string    `json:"namespace,omitempty"`
	Rating    *int32     `json:"rating,omitempty"`
	Title     *string    `json:"title,omitempty"`
}

// CreateJournalEntryFormdataBody defines parameters for CreateJournalEntry.
type CreateJournalEntryFormdataBody struct {
	Body   string `form:"body" json:"body"`
	Rating int32  `form:"rating" json:"rating"`
	Title  string `form:"title" json:"title"`
}

// UpdateJournalEntryFormdataBody defines parameters for UpdateJournalEntry.
type UpdateJournalEntryFormdataBody struct {
	Body   string `form:"body" json:"body"`
	Rating int32  `form:"rating" json:"rating"`
	Title  string `form:"title" json:"title"`
}

// CreateJournalEntryFormdataRequestBody defines body for CreateJournalEntry for application/x-www-form-urlencoded ContentType.
type CreateJournalEntryFormdataRequestBody CreateJournalEntryFormdataBody

// UpdateJournalEntryFormdataRequestBody defines body for UpdateJournalEntry for application/x-www-form-urlencoded ContentType.
type UpdateJournalEntryFormdataRequestBody UpdateJournalEntryFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetIndex request
	GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalEntries request
	GetJournalEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJournalEntryWithBody request with any body
	CreateJournalEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJournalEntryWithFormdataBody(ctx context.Context, body CreateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJournalEntry request
	DeleteJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalEntry request
	GetJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJournalEntryWithBody request with any body
	UpdateJournalEntryWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJournalEntryWithFormdataBody(ctx context.Context, id int64, body UpdateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenAPISpec request
	GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJournalEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJournalEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJournalEntryWithFormdataBody(ctx context.Context, body CreateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJournalEntryRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJournalEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalEntry(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJournalEntryWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJournalEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJournalEntryWithFormdataBody(ctx context.Context, id int64, body UpdateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJournalEntryRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenAPISpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetIndexRequest generates requests for GetIndex
func NewGetIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJournalEntriesRequest generates requests for GetJournalEntries
func NewGetJournalEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJournalEntryRequestWithFormdataBody calls the generic CreateJournalEntry builder with application/x-www-form-urlencoded body
func NewCreateJournalEntryRequestWithFormdataBody(server string, body CreateJournalEntryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateJournalEntryRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateJournalEntryRequestWithBody generates requests for CreateJournalEntry with any type of body
func NewCreateJournalEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJournalEntryRequest generates requests for DeleteJournalEntry
func NewDeleteJournalEntryRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJournalEntryRequest generates requests for GetJournalEntry
func NewGetJournalEntryRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJournalEntryRequestWithFormdataBody calls the generic UpdateJournalEntry builder with application/x-www-form-urlencoded body
func NewUpdateJournalEntryRequestWithFormdataBody(server string, id int64, body UpdateJournalEntryFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdateJournalEntryRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdateJournalEntryRequestWithBody generates requests for UpdateJournalEntry with any type of body
func NewUpdateJournalEntryRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/journal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenAPISpecRequest generates requests for GetOpenAPISpec
func NewGetOpenAPISpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetIndexWithResponse request
	GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error)

	// GetJournalEntriesWithResponse request
	GetJournalEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJournalEntriesResponse, error)

	// CreateJournalEntryWithBodyWithResponse request with any body
	CreateJournalEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error)

	CreateJournalEntryWithFormdataBodyWithResponse(ctx context.Context, body CreateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error)

	// DeleteJournalEntryWithResponse request
	DeleteJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJournalEntryResponse, error)

	// GetJournalEntryWithResponse request
	GetJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetJournalEntryResponse, error)

	// UpdateJournalEntryWithBodyWithResponse request with any body
	UpdateJournalEntryWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error)

	UpdateJournalEntryWithFormdataBodyWithResponse(ctx context.Context, id int64, body UpdateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error)

	// GetOpenAPISpecWithResponse request
	GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error)
}

type GetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexData
}

// Status returns HTTPResponse.Status
func (r GetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]JournalEntry
}

// Status returns HTTPResponse.Status
func (r GetJournalEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r CreateJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r DeleteJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
}

// Status returns HTTPResponse.Status
func (r GetJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJournalEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
}

// Status returns HTTPResponse.Status
func (r UpdateJournalEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJournalEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenAPISpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOpenAPISpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenAPISpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetIndexWithResponse request returning *GetIndexResponse
func (c *ClientWithResponses) GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error) {
	rsp, err := c.GetIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexResponse(rsp)
}

// GetJournalEntriesWithResponse request returning *GetJournalEntriesResponse
func (c *ClientWithResponses) GetJournalEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJournalEntriesResponse, error) {
	rsp, err := c.GetJournalEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalEntriesResponse(rsp)
}

// CreateJournalEntryWithBodyWithResponse request with arbitrary body returning *CreateJournalEntryResponse
func (c *ClientWithResponses) CreateJournalEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error) {
	rsp, err := c.CreateJournalEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJournalEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateJournalEntryWithFormdataBodyWithResponse(ctx context.Context, body CreateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateJournalEntryResponse, error) {
	rsp, err := c.CreateJournalEntryWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJournalEntryResponse(rsp)
}

// DeleteJournalEntryWithResponse request returning *DeleteJournalEntryResponse
func (c *ClientWithResponses) DeleteJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteJournalEntryResponse, error) {
	rsp, err := c.DeleteJournalEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJournalEntryResponse(rsp)
}

// GetJournalEntryWithResponse request returning *GetJournalEntryResponse
func (c *ClientWithResponses) GetJournalEntryWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetJournalEntryResponse, error) {
	rsp, err := c.GetJournalEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalEntryResponse(rsp)
}

// UpdateJournalEntryWithBodyWithResponse request with arbitrary body returning *UpdateJournalEntryResponse
func (c *ClientWithResponses) UpdateJournalEntryWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error) {
	rsp, err := c.UpdateJournalEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJournalEntryResponse(rsp)
}

func (c *ClientWithResponses) UpdateJournalEntryWithFormdataBodyWithResponse(ctx context.Context, id int64, body UpdateJournalEntryFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdateJournalEntryResponse, error) {
	rsp, err := c.UpdateJournalEntryWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJournalEntryResponse(rsp)
}

// GetOpenAPISpecWithResponse request returning *GetOpenAPISpecResponse
func (c *ClientWithResponses) GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecResponse, error) {
	rsp, err := c.GetOpenAPISpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenAPISpecResponse(rsp)
}

// ParseGetIndexResponse parses an HTTP response from a GetIndexWithResponse call
func ParseGetIndexResponse(rsp *http.Response) (*GetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJournalEntriesResponse parses an HTTP response from a GetJournalEntriesWithResponse call
func ParseGetJournalEntriesResponse(rsp *http.Response) (*GetJournalEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJournalEntryResponse parses an HTTP response from a CreateJournalEntryWithResponse call
func ParseCreateJournalEntryResponse(rsp *http.Response) (*CreateJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJournalEntryResponse parses an HTTP response from a DeleteJournalEntryWithResponse call
func ParseDeleteJournalEntryResponse(rsp *http.Response) (*DeleteJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJournalEntryResponse parses an HTTP response from a GetJournalEntryWithResponse call
func ParseGetJournalEntryResponse(rsp *http.Response) (*GetJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJournalEntryResponse parses an HTTP response from a UpdateJournalEntryWithResponse call
func ParseUpdateJournalEntryResponse(rsp *http.Response) (*UpdateJournalEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJournalEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenAPISpecResponse parses an HTTP response from a GetOpenAPISpecWithResponse call
func ParseGetOpenAPISpecResponse(rsp *http.Response) (*GetOpenAPISpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenAPISpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets counts of contacts and journal entries for the authenticated user
	// (GET /)
	GetIndex(w http.ResponseWriter, r *http.Request)
	// List all journal entries
	// (GET /journal)
	GetJournalEntries(w http.ResponseWriter, r *http.Request)
	// Create a new journal entry
	// (POST /journal)
	CreateJournalEntry(w http.ResponseWriter, r *http.Request)
	// Delete a journal entry
	// (DELETE /journal/{id})
	DeleteJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Get a specific journal entry
	// (GET /journal/{id})
	GetJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Update a journal entry
	// (PUT /journal/{id})
	UpdateJournalEntry(w http.ResponseWriter, r *http.Request, id int64)
	// Get the OpenAPI spec
	// (GET /openapi.yaml)
	GetOpenAPISpec(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetIndex operation middleware
func (siw *ServerInterfaceWrapper) GetIndex(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIndex(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetJournalEntries operation middleware
func (siw *ServerInterfaceWrapper) GetJournalEntries(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJournalEntries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) CreateJournalEntry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateJournalEntry(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) DeleteJournalEntry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) GetJournalEntry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateJournalEntry operation middleware
func (siw *ServerInterfaceWrapper) UpdateJournalEntry(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, OidcScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateJournalEntry(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPISpec operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPISpec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.GetIndex)
	m.HandleFunc("GET "+options.BaseURL+"/journal", wrapper.GetJournalEntries)
	m.HandleFunc("POST "+options.BaseURL+"/journal", wrapper.CreateJournalEntry)
	m.HandleFunc("DELETE "+options.BaseURL+"/journal/{id}", wrapper.DeleteJournalEntry)
	m.HandleFunc("GET "+options.BaseURL+"/journal/{id}", wrapper.GetJournalEntry)
	m.HandleFunc("PUT "+options.BaseURL+"/journal/{id}", wrapper.UpdateJournalEntry)
	m.HandleFunc("GET "+options.BaseURL+"/openapi.yaml", wrapper.GetOpenAPISpec)

	return m
}

type GetIndexRequestObject struct {
}

type GetIndexResponseObject interface {
	VisitGetIndexResponse(w http.ResponseWriter) error
}

type GetIndex200JSONResponse IndexData

func (response GetIndex200JSONResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIndex403TextResponse string

func (response GetIndex403TextResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(403)

	_, err := w.Write([]byte(response))
	return err
}

type GetIndex500TextResponse string

func (response GetIndex500TextResponse) VisitGetIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntriesRequestObject struct {
}

type GetJournalEntriesResponseObject interface {
	VisitGetJournalEntriesResponse(w http.ResponseWriter) error
}

type GetJournalEntries200JSONResponse []JournalEntry

func (response GetJournalEntries200JSONResponse) VisitGetJournalEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJournalEntries500TextResponse string

func (response GetJournalEntries500TextResponse) VisitGetJournalEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateJournalEntryRequestObject struct {
	Body *CreateJournalEntryFormdataRequestBody
}

type CreateJournalEntryResponseObject interface {
	VisitCreateJournalEntryResponse(w http.ResponseWriter) error
}

type CreateJournalEntry200JSONResponse int

func (response CreateJournalEntry200JSONResponse) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateJournalEntry422Response struct {
}

func (response CreateJournalEntry422Response) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type CreateJournalEntry500TextResponse string

func (response CreateJournalEntry500TextResponse) VisitCreateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteJournalEntryRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteJournalEntryResponseObject interface {
	VisitDeleteJournalEntryResponse(w http.ResponseWriter) error
}

type DeleteJournalEntry200JSONResponse int64

func (response DeleteJournalEntry200JSONResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJournalEntry404TextResponse string

func (response DeleteJournalEntry404TextResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteJournalEntry500TextResponse string

func (response DeleteJournalEntry500TextResponse) VisitDeleteJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntryRequestObject struct {
	Id int64 `json:"id"`
}

type GetJournalEntryResponseObject interface {
	VisitGetJournalEntryResponse(w http.ResponseWriter) error
}

type GetJournalEntry200JSONResponse JournalEntry

func (response GetJournalEntry200JSONResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJournalEntry404TextResponse string

func (response GetJournalEntry404TextResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type GetJournalEntry500TextResponse string

func (response GetJournalEntry500TextResponse) VisitGetJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateJournalEntryRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateJournalEntryFormdataRequestBody
}

type UpdateJournalEntryResponseObject interface {
	VisitUpdateJournalEntryResponse(w http.ResponseWriter) error
}

type UpdateJournalEntry200JSONResponse JournalEntry

func (response UpdateJournalEntry200JSONResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateJournalEntry404TextResponse string

func (response UpdateJournalEntry404TextResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateJournalEntry422TextResponse string

func (response UpdateJournalEntry422TextResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(422)

	_, err := w.Write([]byte(response))
	return err
}

type UpdateJournalEntry500TextResponse string

func (response UpdateJournalEntry500TextResponse) VisitUpdateJournalEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetOpenAPISpecRequestObject struct {
}

type GetOpenAPISpecResponseObject interface {
	VisitGetOpenAPISpecResponse(w http.ResponseWriter) error
}

type GetOpenAPISpec200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOpenAPISpec200ApplicationyamlResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetOpenAPISpec500TextResponse string

func (response GetOpenAPISpec500TextResponse) VisitGetOpenAPISpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Gets counts of contacts and journal entries for the authenticated user
	// (GET /)
	GetIndex(ctx context.Context, request GetIndexRequestObject) (GetIndexResponseObject, error)
	// List all journal entries
	// (GET /journal)
	GetJournalEntries(ctx context.Context, request GetJournalEntriesRequestObject) (GetJournalEntriesResponseObject, error)
	// Create a new journal entry
	// (POST /journal)
	CreateJournalEntry(ctx context.Context, request CreateJournalEntryRequestObject) (CreateJournalEntryResponseObject, error)
	// Delete a journal entry
	// (DELETE /journal/{id})
	DeleteJournalEntry(ctx context.Context, request DeleteJournalEntryRequestObject) (DeleteJournalEntryResponseObject, error)
	// Get a specific journal entry
	// (GET /journal/{id})
	GetJournalEntry(ctx context.Context, request GetJournalEntryRequestObject) (GetJournalEntryResponseObject, error)
	// Update a journal entry
	// (PUT /journal/{id})
	UpdateJournalEntry(ctx context.Context, request UpdateJournalEntryRequestObject) (UpdateJournalEntryResponseObject, error)
	// Get the OpenAPI spec
	// (GET /openapi.yaml)
	GetOpenAPISpec(ctx context.Context, request GetOpenAPISpecRequestObject) (GetOpenAPISpecResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetIndex operation middleware
func (sh *strictHandler) GetIndex(w http.ResponseWriter, r *http.Request) {
	var request GetIndexRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndex(ctx, request.(GetIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIndexResponseObject); ok {
		if err := validResponse.VisitGetIndexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJournalEntries operation middleware
func (sh *strictHandler) GetJournalEntries(w http.ResponseWriter, r *http.Request) {
	var request GetJournalEntriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJournalEntries(ctx, request.(GetJournalEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJournalEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJournalEntriesResponseObject); ok {
		if err := validResponse.VisitGetJournalEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateJournalEntry operation middleware
func (sh *strictHandler) CreateJournalEntry(w http.ResponseWriter, r *http.Request) {
	var request CreateJournalEntryRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body CreateJournalEntryFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJournalEntry(ctx, request.(CreateJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateJournalEntryResponseObject); ok {
		if err := validResponse.VisitCreateJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJournalEntry operation middleware
func (sh *strictHandler) DeleteJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteJournalEntryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJournalEntry(ctx, request.(DeleteJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteJournalEntryResponseObject); ok {
		if err := validResponse.VisitDeleteJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJournalEntry operation middleware
func (sh *strictHandler) GetJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetJournalEntryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJournalEntry(ctx, request.(GetJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJournalEntryResponseObject); ok {
		if err := validResponse.VisitGetJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateJournalEntry operation middleware
func (sh *strictHandler) UpdateJournalEntry(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateJournalEntryRequestObject

	request.Id = id

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body UpdateJournalEntryFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateJournalEntry(ctx, request.(UpdateJournalEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateJournalEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateJournalEntryResponseObject); ok {
		if err := validResponse.VisitUpdateJournalEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOpenAPISpec operation middleware
func (sh *strictHandler) GetOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	var request GetOpenAPISpecRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOpenAPISpec(ctx, request.(GetOpenAPISpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOpenAPISpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOpenAPISpecResponseObject); ok {
		if err := validResponse.VisitGetOpenAPISpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW3PbNhb+KxhkHyXSt83u8Cle2/Eo463dqOmL44dD4EiCQwIIcKjLZPTfOwCpCyXG",
	"VppM6077YlMgzgXf+c4F/MKFKa3RqMnz7Av3YoIlxMeBlji/BILwwzpj0ZHC+EoYTSDIX5hKU1gYGVcC",
	"8YwrTa/PeI/TwmL9E8fo+LLHH03lNBRXmpzCb5BcrpdM/oiCgq53G12Lfe9yI+NqI+bJKT0OYhIIWzbD",
	"Qp9UiRu7m91KHngyDSV6CwI7jTqg8LSj6vSkUxUpKrrU7IOw7HGPonKKFsMQs/roRkkR/1vUA3lhtEZB",
	"H1zBMz4hsj5LU4nT/pmxZ6Ik//q/+rNAnSeVT6CiyVEiTJkmMyyK/idtZjoNipTsC6NHalyFsxi98bxl",
	"hi+DUzgnDLG5NCJ6JNELp2yUy/j/jUOmdI2EMppBbipiNEE2RJ2DA/b+avgLO78bsOkx7/Gq5ftY0aTK",
	"o5PWPGoazVNfi8WA6ZHZYmd4xBJUUDDCQglF4N9Y8xjigS5o4XXweMbfrjawu9WGPeslkFPzhEz6Kn3T",
	"2M+aReNqhrVOuz7KyDgGzKvSFsgsOm80FOzq/R2bYc7A2kKJGo+8UgWxmaJJBOXaME+gJTjJCpU7cIse",
	"uw2oX7IGdhYCh5pWGkBLdmc8jR0Of75hEgiYJ+NgjAm7RK/GGiUDz4A5HKFDLTA6WBqJTm/wlzjFwtgS",
	"dePQtUk+6o96UFqnNGVshcsa3KQFbqrqjbzHCyVQ+0jsBu/z67ub/mly9A0hTvPC5GkJSqc3g4urn4ZX",
	"AXFflSWEKsDvtnFdn6LySo83WMpC5T12O7i82AEqkBpd6W9HQ3RTFZKZP3dA69QUxCKVCw2lEnydv7yb",
	"zFN0vmbGUXKcHAX3QwaBVTzjp8lxEjZZoEnMnDT8GSM1+Vzn3kDyjF8jxeLMe9yht0b7OvtPjo5W/Me6",
	"um5RK330wfSqxIenfzkc8Yy/Sjc9IG0aQLqp/jGt28SOL1t57DCU9SlK5ish0PtRVRSLcMKzo9Mdpwjn",
	"lNoC1I47uzVvz+xb43IlJeqg9997h/3des81CzU4lC2GzhnHjBCVcyhbdZZn96sKe/+wfNjm3jWSZyL0",
	"NM/MiK36Y+RY0/gY1p0v5lrg41beomSVjxWHYOx5ds9VjO9DMJ82Cp6iw7tWc/1eXijC0j9HkFYP3vQn",
	"cA4WXSC/24Hh64x5UZG9UZ4YFMVuGLditYrPw7LHrfEdEbpwCIQtxEKIPlfo6X/NtPKV6Mz7s9msHxKt",
	"X7kCtTASZRuFA6efHzWIBL9VQDC7b7b1aqNrEw/700pLjlyFy+/k6N6Y+CThFkzEEHSUp5OT/THlVyiU",
	"rAtbZM2LY2VNKAZM46zFzEUnL7eqSPpFyWV94gLrcbjN1cu4vsNVCw5KJHQ+OhVOHBvVZoBSku+GuLeF",
	"yfNj/sN3EuJ5C88wpAakq4Gd/ajARziZNsRGptLyxdGqjj2DAyjVO6QX/UWoc3ibe45DT41BfxsWXSOF",
	"245FoUZKHMQlW3Vw6YOV8KdVon9680vIpypS4I/OpmYm+BHaX/wkUSfZQSU/TBHNfTVZQPnkheTWoj6/",
	"Gwwtim+7jawU74GwTdc2CI2tWHFexrWiVQrDXW/bxS1sSyQIwMZQuemqqLWN3RgBRetrTL239ekkS9Mi",
	"7JsYT9nx6el/eAhzY2fvKxwSsHXI/KZ0Rn+Wvd3916jRQdEpUl9U92V2r3slaBhjcH8ju6LWvvRFfYHu",
	"lFpdrjvELjEnRg7EpxC4tYTEvHP7uSA1VbToNAP1y1C59yU/eHT1pzVVWuMoxXn4t5EO13kJnWgOTeUE",
	"stAsmDQzXRiQ26eTyJcPy98CAAD//09IlsyZFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
